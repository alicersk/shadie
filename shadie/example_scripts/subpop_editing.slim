initialize() {
	defineConstant("K", 1000);     // carrying capacity
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}

//here is the subpopulation structure:
//references pandas DF with columns: 
	//nodeidx, source, dest1, dest2, gen
	// sorted by youngest --> oldest gen

//write beginning row:
{gen}{
	sim.addSubpop("p{nodeidx}", K);
}
//for row in pandas DF, write the following:
{gen}{
	sim.addSubpop("p{child1}", K);
	sim.addSubpop("p{child2}", K);
	p{nodeidx}.setSubpopulationSize(0);
}
//append until out of data


// --------------------------------------------
// Example:
// all subpopulations must have "p#" structure:
	// pmax = root
	//
1 {
	sim.addSubpop("p1", K); //p1 = root
}
1000 { //age of first split in generations
	sim.addSubpop("p2", K);
	sim.addSubpop("p3", K);
	p1.setSubpopulationSize(0);
	}
2000 late() { sim.outputFull(); }

